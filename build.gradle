plugins {
  id "com.diffplug.gradle.spotless" version "2.2.0" apply false
}

group 'swtbuilder'
version '1.0-SNAPSHOT'

static String swtOSVariant() {
  final String osName = System.getProperty('os.name').toLowerCase(Locale.ENGLISH)

  switch (osName) {
    case { it.contains('mac') }: return 'cocoa.macosx.x86_64'
    case { it.contains('windows') }: return 'win32.win32.x86_64'
    case { it.contains('linux') }: return 'gtk.linux.x86_64'
    default: throw new GradleException("Cannot determine the SWT dependencies for '${osName}'")
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'com.diffplug.gradle.spotless'

  repositories {
    mavenCentral()
    maven {
      url "http://maven-eclipse.github.io/maven"
    }
  }

  dependencies {
    compile "org.eclipse.swt:org.eclipse.swt.${swtOSVariant()}:4.6"
  }

  spotless {
    java {
      eclipseFormatFile "${parent.projectDir}/config/java-format.xml"
    }
  }

  task format(dependsOn: ['spotlessApply'])
}

project(':builder') {
  apply plugin: 'osgi'

  configurations {
    junitAntTask
  }

  dependencies {
    testCompile 'junit:junit:4.12'
    junitAntTask 'org.apache.ant:ant-junit:1.9.7', 'org.apache.ant:ant-junit4:1.9.7'
  }

  jar {
    baseName 'swtbuilder'
  }

  test {
    actions = []
    ant.taskdef(
      name: 'junitTask',
      classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask',
      classpath: configurations.junitAntTask.asPath)

    doLast {
      ant.junitTask(showoutput: true, fork: true, forkmode: 'once',
                    clonevm: true, haltonerror: true, haltonfailure: true) {
        jvmarg(value: '-XstartOnFirstThread')
        batchtest(toDir: "${project.projectDir.path}/build/tests") {
          fileset (dir: project.sourceSets.test.output.classesDir) {
            include(name: '**/*Test.class')
          }
        }
        classpath(location: project.sourceSets.main.output.classesDir)
        classpath(location: project.sourceSets.test.output.classesDir)
        classpath(path: project.sourceSets.test.compileClasspath.asPath)
      }
    }
  }
}
